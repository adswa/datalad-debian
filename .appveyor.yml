# The aim of this test setup is to create a "native" platform experience, using
# as few cross-platform helper tools as possible.
#
# A virtualenv is used for testing. The effective virtual env
# is available under ~/VENV.
#
# All workers support remote login. Login details are shown at the top of each
# CI run log.
#
# - A permitted SSH key must be defined in an APPVEYOR_SSH_KEY environment
#   variable (via the appveyor project settings)
#
# - SSH login info is given in the form of: 'appveyor@67.225.164.xx -p 22xxx'
#
# - Login with:
#
#   ssh -o StrictHostKeyChecking=no <LOGIN>
#
# - to prevent the CI run from exiting, `touch` a file named `BLOCK` in the
#   user HOME directory (current directory directly after login). The session
#   will run until the file is removed (or 60 min have passed)


# make repository clone cheap
shallow_clone: true


environment:
  DATALAD_TESTS_SSH: 1

  # The ID variable had no impact, but sorts first in the CI run overview
  # an intelligible name can help to locate a specific test run
  matrix:
    - ID: Ubu20
      DTS: datalad_debian
      APPVEYOR_BUILD_WORKER_IMAGE: Ubuntu2004
      INSTALL_SYSPKGS: python3-virtualenv
      # system git-annex is way too old, use better one
      INSTALL_GITANNEX: git-annex -m deb-url --url http://ftp.us.debian.org/debian/pool/main/g/git-annex/git-annex_8.20201127-1_amd64.deb


# it is OK to specify paths that may not exist for a particular test run
cache:
  # pip cache
  - /home/appveyor/.cache/pip -> .appveyor.yml


# turn of support for MS project build support (not needed)
build: off


# init cannot use any components from the repo, because it runs prior to
# cloning it
init:
  # enable external SSH access to CI worker on all other systems
  # needs APPVEYOR_SSH_KEY defined in project settings (or environment)
  - sh: curl -sflL 'https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-ssh.sh' | bash -e -
  # Identity setup
  - git config --global user.email "test@appveyor.land"
  - git config --global user.name "Appveyor Almighty"
  - sh: mkdir ~/DLTMP
  - sh: export TMPDIR=~/DLTMP
  # deploy the datalad installer
  - appveyor DownloadFile https://raw.githubusercontent.com/datalad/datalad-installer/master/src/datalad_installer.py -FileName datalad_installer.py


install:
  # If a particular Python version is requested, use env setup (using the
  # appveyor provided environments/installation). Note, these are broken
  # on the ubuntu images
  # https://help.appveyor.com/discussions/problems/28217-appveyor-ubunu-image-with-python3-lzma-module
  # Otherwise create a virtualenv using the default Python 3, to enable uniform
  # use of python/pip executables below
  - sh: "[ \"x$PY\" != x ] && . ${HOME}/venv${PY}/bin/activate || virtualenv -p 3 ${HOME}/dlvenv && . ${HOME}/dlvenv/bin/activate; ln -s \"$VIRTUAL_ENV\" \"${HOME}/VENV\""
  - cmd: "set PATH=C:\\Python%PY%;C:\\Python%PY%\\Scripts;%PATH%"
  # Missing system software
  - sh: "[ -n \"$INSTALL_SYSPKGS\" ] && ( [ \"x${APPVEYOR_BUILD_WORKER_IMAGE}\" = \"xmacOS\" ] && brew install -q ${INSTALL_SYSPKGS} || sudo apt-get install --no-install-recommends -y ${INSTALL_SYSPKGS} ) || true"
  # deploy git-annex, if desired
  - sh: "[ -n \"${INSTALL_GITANNEX}\" ] && python datalad_installer.py ${INSTALL_GITANNEX}"


#before_build:
#


build_script:
  - pip install -r requirements-devel.txt
  - pip install .


#after_build:
#


before_test:
  - datalad wtf


test_script:
  # run tests on installed module, not source tree files
  - cmd: md __testhome__
  - sh: mkdir __testhome__
  - cd __testhome__
    # run test selecion (--traverse-namespace needed from Python 3.8 onwards)
  - cmd: python -m nose --traverse-namespace -s -v -A "not (turtle)" --with-cov --cover-package datalad_debian %DTS%
  - sh:  python -m nose --traverse-namespace -s -v -A "not (turtle)" --with-cov --cover-package datalad_debian ${DTS}


after_test:
  # prepare coverage.xml in a separate invocation.
  # if invoked directly with nose - do not include test_ files themselves
  - python -m coverage xml
  - sh: bash <(curl -s https://codecov.io/bash)


#on_success:
#


#on_failure:
#


on_finish:
  # conditionally block the exit of a CI run for direct debugging
  - sh: while [ -f ~/BLOCK ]; do sleep 5; done
